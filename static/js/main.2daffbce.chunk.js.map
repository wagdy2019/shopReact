{"version":3,"sources":["login/login.js","store.js","products/products.js","cart/Cart.js","Routing.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","useState","showErrorMsg","changeErrorMsg","class","type","id","name","autocomplete","onClick","e","document","getElementById","value","window","location","href","initialState","cartData","store","createStore","state","action","console","log","connect","term","getState","cart","updateCartValues","searchedValue","updateSearchedValue","category","color","price","brand","sort","filterValue","setFilterValue","className","to","pathname","length","placeholder","onChange","target","style","display","width","fontStyle","fontWeight","fontSize","selected","float","obj","categoryValue","colorValue","priceValue","brandValue","sortValue","ProductList","a","b","productName","localeCompare","filter","x","toLowerCase","includes","map","data","index","isCategorySatisfied","isColorSatisfied","isPriceSatisfied","isbrandSatisfied","parseInt","checkFilterForObject","src","image","alt","updatedCart","product","productId","dispatch","removeFromCart","handleCart","Routing","exact","path","component","Products","this","Cart","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2daffbce.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nfunction Login(props){\r\n\r\n    const errorMsg = 'Please enter a valid details!!'\r\n    const [showErrorMsg , changeErrorMsg] = useState(false)\r\n\r\n    let handleSubmit = (e) => {\r\n        if(document.getElementById('username').value ==='wagdy' && document.getElementById('password').value==='123'){\r\n            changeErrorMsg(false)\r\n            window.location.href='/shopReact/#/products'\r\n        }else{\r\n            changeErrorMsg(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav class=\"navbar navbar-light bg-dark\">\r\n                <span class='navContent'>Login</span>\r\n            </nav>\r\n            <div class=\"form loginPanel\" >\r\n                <div class=\"form-group\" >\r\n                    <label class='cardPriceStyle'>Username</label>\r\n                    <input type=\"text\" id='username' name='username' autocomplete=\"off\"  class=\"form-control rounded\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label class='cardPriceStyle'>Password</label>\r\n                    <input type=\"password\" id='password' name='password'  class=\"form-control rounded\" />\r\n                </div>\r\n                {showErrorMsg && <p class='error' >\r\n                    {errorMsg}\r\n                </p>}\r\n                <div class='rightAlign' >\r\n                    <button class='btn btn-primary' type='submit' onClick={handleSubmit} >Login</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import { createStore } from 'redux'\r\n\r\nconst initialState = {\r\n  cartData : []\r\n}\r\n\r\nfunction reducer(state = initialState,action){\r\n  console.log('act',action,state)\r\n  switch(action.type){\r\n    case 'HANDLE_CART':\r\n      return {\r\n        cartData : action.cartData\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nconst store = createStore(reducer)\r\n\r\nexport default store","import React, { Component, useState } from 'react'\r\nimport ProductList from '../data/products.json'\r\nimport { Link } from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport store from '../store'\r\nimport './../ekartStyle.css'\r\n\r\nfunction searchingFor(term,filterValue) {\r\n\r\n    console.log('searchingFor '+term)\r\n    return function (x) {\r\n        console.log(x.productName)\r\n        console.log(x.productName.toLowerCase().includes(term.toLowerCase()))\r\n        return ( \r\n            x.productName.toLowerCase().includes(term.toLowerCase())  \r\n        ) || \r\n        (\r\n            !term\r\n        )\r\n    }\r\n}\r\n\r\nfunction Products(props){\r\n\r\n    const [cart , updateCartValues] = useState(store.getState().cartData)\r\n    const [searchedValue , updateSearchedValue] = useState('')\r\n    const [filterValue , setFilterValue] = useState({\r\n        category:'',\r\n        color:'',\r\n        price:'',\r\n        brand:'',\r\n        sort:''\r\n    })\r\n\r\n    let handleCart = (data) => {\r\n        let cartData = store.getState().cartData\r\n        props.dispatch({type:'HANDLE_CART',cartData:[...cartData , data]})\r\n        updateCartValues([...cart,data])\r\n    }\r\n\r\n    let removeFromCart = data => {\r\n        let cart = store.getState().cartData\r\n        let updatedCart = cart.filter(function(product) { return product.productId != data.productId });\r\n        props.dispatch({type:'HANDLE_CART',cartData:updatedCart})\r\n        updateCartValues(updatedCart)\r\n    }\r\n\r\n    let applyFilter = () => {\r\n        let obj = {}\r\n        let categoryValue = document.getElementById('category').value\r\n        let colorValue = document.getElementById('color').value\r\n        let priceValue = document.getElementById('price').value\r\n        let brandValue = document.getElementById('brand').value\r\n        let sortValue = document.getElementById('sort').value\r\n        // let categoryValue = document.getElementById('category').options[document.getElementById('category').selectedindex].value\r\n        // let colorValue = document.getElementById('color').options[document.getElementById('color').selectedindex].value\r\n        // let brandValue = document.getElementById('brand').options[document.getElementById('brand').selectedindex].value\r\n        if(categoryValue.length > 0) {\r\n            obj['category'] = categoryValue\r\n        }else{\r\n            obj['category'] = ''\r\n        }\r\n        if(colorValue.length > 0){\r\n            obj['color'] = colorValue\r\n        }else{\r\n            obj['color'] = ''\r\n        }\r\n        if(priceValue.length > 0){\r\n            obj['price'] = priceValue\r\n        }else{\r\n            obj['price'] = ''\r\n        }\r\n        if(brandValue.length > 0){\r\n            obj['brand'] = brandValue\r\n        }else{\r\n            obj['brand'] = ''\r\n        }\r\n        if(sortValue.length > 0){\r\n            obj['sort'] = sortValue\r\n        }else{\r\n            obj['sort'] = ''\r\n        }\r\n        setFilterValue(obj)\r\n    }\r\n\r\n    let checkFilterForObject = (data) => {\r\n        let isCategorySatisfied = filterValue.category.length > 0 ? false : true\r\n        let isColorSatisfied = filterValue.color.length ? false : true\r\n        let isPriceSatisfied = filterValue.price.length ? false : true\r\n        let isbrandSatisfied = filterValue.brand.length ? false : true\r\n        if(filterValue.category === data.category ){\r\n            isCategorySatisfied = true\r\n        }\r\n        if(filterValue.color === data.color ){\r\n            isColorSatisfied = true\r\n        }\r\n        if(parseInt(filterValue.price) > parseInt(data.price) ){\r\n            isPriceSatisfied = true\r\n        }\r\n        if(filterValue.brand === data.brand ){\r\n            isbrandSatisfied = true\r\n        }\r\n        console.log('flter',data.productName,isCategorySatisfied ,isPriceSatisfied, isColorSatisfied , isbrandSatisfied)\r\n        return isCategorySatisfied && isColorSatisfied && isPriceSatisfied && isbrandSatisfied\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <nav class=\"navbar navbar-light bg-dark\">\r\n                <span className='navContent' >Products</span>\r\n                <div class='rightAlign'>\r\n                <Link className='btn btn-success' to={{ pathname: '/cart'}}>Go to Cart &nbsp;\r\n                    {store.getState().cartData.length> 0 && <span class=\"badge badge-danger\">{store.getState().cartData.length}</span> }\r\n                    </Link>\r\n                </div>\r\n            </nav>\r\n            <br/>\r\n            <div class=\"input-group mb-3\">\r\n                <div class=\"input-group-prepend\">\r\n                <span class=\"input-group-text\" id=\"basic-addon1\"><i class=\"fa fa-search\"></i></span>\r\n                </div>\r\n                    <input type=\"text\" \r\n                        class=\"form-control\" \r\n                        placeholder=\"Search for Products\" \r\n                        onChange={(e) => updateSearchedValue(e.target.value)}\r\n                    />\r\n            </div>\r\n            <div style={{display:\"flex\",width:'100%'}} >\r\n                &nbsp;\r\n                <span style={{width:'7%',fontStyle:'italic',fontWeight:'bold',fontSize:'23px'}} ><i><u>Filter :</u></i></span>\r\n                <select style={{width:'15%'}} id=\"category\" class=\"form-control\">\r\n                    <option value='' selected>Category...</option>\r\n                    <option value='Shoes' >Shoes</option>\r\n                    <option value='Watches' >Watches</option>\r\n                    <option value='Mobiles' >Mobiles</option>\r\n                    <option value='Laptops' >Laptops</option>\r\n                    <option value='Clothings' >clothings</option>\r\n                </select> &nbsp; &nbsp;&nbsp; &nbsp;\r\n                <select style={{width:'10%'}} id=\"color\" class=\"form-control\">\r\n                    <option value='' selected>Color...</option>\r\n                    <option value='White' >White</option>\r\n                    <option value='Black' >Black</option>\r\n                    <option value='Blue' >Blue</option>\r\n                </select> &nbsp; &nbsp;&nbsp; &nbsp;\r\n                <select style={{width:'15%'}} id=\"price\" class=\"form-control\">\r\n                    <option value='' selected>Price...</option>\r\n                    <option value='1000' >Less than 1000</option>\r\n                    <option value='50000' >Less than 50,000</option>\r\n                    <option value='100000' >Less than 1 Lakh</option>\r\n                </select> &nbsp; &nbsp;&nbsp; &nbsp;\r\n                <select style={{width:'10%'}} id=\"brand\" class=\"form-control\">\r\n                    <option value='' selected>Brand...</option>\r\n                    <option value='Adidas' >Adidas</option>\r\n                    <option value='Puma' >Puma</option>\r\n                    <option value='Fastrack' >Fastrack</option>\r\n                    <option value='HP' >HP</option>\r\n                    <option value='Apple' >Apple</option>\r\n                </select> &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; \r\n                <select style={{width:'15%'}} id=\"sort\" class=\"form-control\">\r\n                    <option value='' selected>Sort...</option>\r\n                    <option value='Low' >Price : Low to High</option>\r\n                    <option value='High' >Price : High to Low</option>\r\n                    <option value='AtoZ' >A - Z</option>\r\n                </select> &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; \r\n                <div style={{float:'right'}} >\r\n                    <button class='btn btn-primary' onClick={applyFilter} >Apply</button> &nbsp;\r\n                    <button class='btn btn-danger' onClick={() => setFilterValue({category:'',color:'',price:'',brand:'',sort:''})} >Clear Filter</button>\r\n                </div>\r\n            </div>\r\n            <div className='productDisplayLayout'>\r\n                {ProductList.sort(function(a,b){\r\n                    if(filterValue.sort.length > 0){\r\n                        switch(filterValue.sort){\r\n                            case 'Low':\r\n                                return a.price - b.price\r\n                            case 'High':\r\n                                return b.price - a.price\r\n                            case 'AtoZ':\r\n                                return a.productName.localeCompare(b.productName);\r\n                        }\r\n                    }\r\n                }).filter(searchingFor(searchedValue,filterValue) ).map((data,index) =>{\r\n                    if(checkFilterForObject(data)){\r\n                        return(\r\n                            <>\r\n                                <div className='cardStyle'>\r\n                                    <img src={data.image} class=\"card-img-top\" alt=\"...\"/>\r\n                                    <div class=\"card-body\">\r\n                                        <h5 class=\"card-title cardTitleStyle\">{data.productName}</h5>\r\n                                        <div class='flex'>\r\n                                            <p class='cardPriceStyle'>Price : </p> &nbsp;\r\n                                            <p class=\"card-text\">{data.price} /-</p>\r\n                                        </div>\r\n                                        <div class='flex'>\r\n                                            {!store.getState().cartData.includes(data)\r\n                                            ? \r\n                                            <div>\r\n                                                <button id='buttonFontSize' className='btn btn-primary' onClick={() => handleCart(data)} >Add to Cart</button> &nbsp;\r\n                                            </div>\r\n                                            :\r\n                                            <div>\r\n                                                <button id='buttonFontSize' className='btn btn-danger' onClick={() => removeFromCart(data)} >Remove</button> &nbsp; \r\n                                            </div>\r\n                                        }\r\n                                            <button id='buttonFontSize' className='btn btn-secondary' >More details</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        )\r\n                    }\r\n                })}\r\n            </div>\r\n        </div>\r\n    )   \r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    cartData : state.cartData\r\n})\r\n\r\nexport default connect()(Products)","import React, { Component, useState } from 'react'\r\nimport store from '../store'\r\nimport { Link } from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport './../ekartStyle.css'\r\n\r\nfunction Cart(props){\r\n\r\n    const [cart , updateCartValues] = useState(store.getState().cartData)\r\n\r\n    let removeFromCart = data => {\r\n        let cart = store.getState().cartData\r\n        let updatedCart = cart.filter(function(product) { return product.productId != data.productId });\r\n        props.dispatch({type:'HANDLE_CART',cartData:updatedCart})\r\n        updateCartValues(updatedCart)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav class=\"navbar navbar-light bg-dark\">\r\n                <span className='navContent' >Cart &nbsp;\r\n                {store.getState().cartData.length> 0 && <span class=\"badge badge-danger\">{store.getState().cartData.length}</span> }\r\n                </span>\r\n            </nav>\r\n             <div className='productDisplayLayout' >\r\n                {store.getState().cartData.length === 0 && \r\n                    <div className='cartEmptyMessage'>\r\n                        <h3 className='App italic' >Your cart is empty!!</h3>\r\n                        <h6 className='App italic' >Visit <a href='/products'>Products</a> page to explore more..</h6>\r\n                    </div>\r\n                }\r\n                {store.getState().cartData.map(data =>{\r\n                    return(\r\n                        <div class=\"card\" className='cardStyle' >\r\n                            <img src={data.image} class=\"card-img-top\" alt=\"...\"/>\r\n                            <div class=\"card-body\">\r\n                            <h5 class=\"card-title cardTitleStyle\" >{data.productName}</h5>\r\n                            <div class='flex'>\r\n                                <p class='cardPriceStyle' >Price : </p> &nbsp;\r\n                                <p class=\"card-text\">{data.price} /-</p>\r\n                            </div>\r\n                                <div class='rightAlign' >\r\n                                    <button id='buttonFontSize' className='btn btn-danger' onClick={() => removeFromCart(data)} >Remove</button> \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            {\r\n                    store.getState().cartData.length > 0 && \r\n                    <div class='rightAlign'>\r\n                        <Link className='btn btn-secondary' to={{ pathname: '/products'}}>Back to products</Link> &nbsp;\r\n                        <button className='btn btn-success'>Check out</button>\r\n                    </div>\r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    cartData : state.cartData\r\n})\r\n\r\nexport default connect()(Cart)","import React, { Component } from 'react'\r\nimport { HashRouter as Router , Route  , Switch } from 'react-router-dom'\r\nimport Login from './login/login'\r\nimport Products from './products/products'\r\nimport Cart from './cart/Cart'\r\n\r\nexport class Routing extends Component {\r\n    render() {  \r\n        return (\r\n            <div>\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path=\"/\"><Login/></Route>\r\n                        <Route exact path=\"/login\" component={Login} />\r\n                        <Route exact path=\"/products\" component={Products} store={this.props.store} />\r\n                        <Route exact path=\"/cart/:name\" component={Cart} store={this.props.store} />\r\n                        <Route exact path=\"/cart\" component={Cart} store={this.props.store} />\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Routing","import React from 'react';\nimport './App.css';\nimport Routing from './Routing';\nimport store from './store'\nimport { Provider } from 'react-redux';\n\nfunction App() {\n  return (\n    <div>\n      <Provider store={store} >\n        <Routing />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}